// Code generated by candi v1.8.8.

package workerhandler

import (
	"context"
	"fmt"
	"time"

	"monorepo/services/seaotter/pkg/shared/usecase"

	"github.com/Bhinneka/candi/tracer"

	"github.com/Bhinneka/candi/codebase/factory/dependency"
	"github.com/Bhinneka/candi/codebase/factory/types"
	"github.com/Bhinneka/candi/codebase/interfaces"

	"github.com/Bhinneka/candi/candishared"
)

// TaskQueueHandler struct
type TaskQueueHandler struct {
	uc        usecase.Usecase
	validator interfaces.Validator
}

// NewTaskQueueHandler constructor
func NewTaskQueueHandler(uc usecase.Usecase, deps dependency.Dependency) *TaskQueueHandler {
	return &TaskQueueHandler{
		uc:        uc,
		validator: deps.GetValidator(),
	}
}

// MountHandlers mount handler group
func (h *TaskQueueHandler) MountHandlers(group *types.WorkerHandlerGroup) {
	group.Add("salesorder-task-one", h.taskOne)
	group.Add("salesorder-task-two", h.taskTwo)
}

func (h *TaskQueueHandler) taskOne(ctx context.Context, message []byte) error {
	trace, ctx := tracer.StartTraceWithContext(ctx, "SalesorderDeliveryTaskQueue:TaskOne")
	defer trace.Finish()

	retried := candishared.GetValueFromContext(ctx, candishared.ContextKeyTaskQueueRetry).(int)
	fmt.Printf("executing task 'salesorder-task-one' has been %d retry\n", retried)
	return &candishared.ErrorRetrier{
		Delay:   10 * time.Second,
		Message: "Error one",
	}
}

func (h *TaskQueueHandler) taskTwo(ctx context.Context, message []byte) error {
	trace, ctx := tracer.StartTraceWithContext(ctx, "SalesorderDeliveryTaskQueue:TaskTwo")
	defer trace.Finish()

	retried := candishared.GetValueFromContext(ctx, candishared.ContextKeyTaskQueueRetry).(int)
	fmt.Printf("executing task 'salesorder-task-two' has been %d retry\n", retried)
	return &candishared.ErrorRetrier{
		Delay:   3 * time.Second,
		Message: "Error two",
	}
}
