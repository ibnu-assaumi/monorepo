// Code generated by candi v1.8.8.

package workerhandler

import (
	"context"
	"fmt"

	"monorepo/services/seaotter/pkg/shared/usecase"

	"github.com/Bhinneka/candi/tracer"

	"github.com/Bhinneka/candi/codebase/factory/dependency"
	"github.com/Bhinneka/candi/codebase/factory/types"
	"github.com/Bhinneka/candi/codebase/interfaces"

	"github.com/Bhinneka/candi/candihelper"
)

// CronHandler struct
type CronHandler struct {
	uc        usecase.Usecase
	validator interfaces.Validator
}

// NewCronHandler constructor
func NewCronHandler(uc usecase.Usecase, deps dependency.Dependency) *CronHandler {
	return &CronHandler{
		uc:        uc,
		validator: deps.GetValidator(),
	}
}

// MountHandlers mount handler group
func (h *CronHandler) MountHandlers(group *types.WorkerHandlerGroup) {
	group.Add(candihelper.CronJobKeyToString("salesorder-scheduler", "message", "10s"), h.handleSalesorder)
}

func (h *CronHandler) handleSalesorder(ctx context.Context, message []byte) error {
	trace, ctx := tracer.StartTraceWithContext(ctx, "SalesorderDeliveryCron:Hello")
	defer trace.Finish()

	fmt.Println("cron: execute in module salesorder, message:", string(message))
	return nil
}
