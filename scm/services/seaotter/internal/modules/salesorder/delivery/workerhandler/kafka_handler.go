// Code generated by candi v1.8.8.

package workerhandler

import (
	"context"
	"fmt"

	"monorepo/services/seaotter/pkg/shared/usecase"

	"github.com/Bhinneka/candi/tracer"

	"github.com/Bhinneka/candi/codebase/factory/dependency"
	"github.com/Bhinneka/candi/codebase/factory/types"
	"github.com/Bhinneka/candi/codebase/interfaces"

	"github.com/Bhinneka/candi/candishared"
)

// KafkaHandler struct
type KafkaHandler struct {
	uc        usecase.Usecase
	validator interfaces.Validator
}

// NewKafkaHandler constructor
func NewKafkaHandler(uc usecase.Usecase, deps dependency.Dependency) *KafkaHandler {
	return &KafkaHandler{
		uc:        uc,
		validator: deps.GetValidator(),
	}
}

// MountHandlers mount handler group
func (h *KafkaHandler) MountHandlers(group *types.WorkerHandlerGroup) {
	group.Add("salesorder", h.handleSalesorder) // handling topic "salesorder"
}

// ProcessMessage from kafka consumer
func (h *KafkaHandler) handleSalesorder(ctx context.Context, message []byte) error {
	trace, ctx := tracer.StartTraceWithContext(ctx, "SalesorderDeliveryKafka:Hello")
	defer trace.Finish()

	key := candishared.GetValueFromContext(ctx, candishared.ContextKeyWorkerKey).([]byte)
	fmt.Printf("message consumed by module salesorder. key: %s, message: %s\n", key, message)
	return nil
}
