// Code generated by candi v1.8.8.

package repository

import (
	"context"

	"time"

	"github.com/google/uuid"

	"monorepo/services/seaotter/internal/modules/salesorder/domain"
	shareddomain "monorepo/services/seaotter/pkg/shared/domain"

	"github.com/Bhinneka/candi/tracer"

	"github.com/Bhinneka/candi/candishared"

	"monorepo/globalshared"

	"gorm.io/gorm"
)

type salesorderRepoSQL struct {
	readDB, writeDB *gorm.DB
}

// NewSalesorderRepoSQL mongo repo constructor
func NewSalesorderRepoSQL(readDB, writeDB *gorm.DB) SalesorderRepository {
	return &salesorderRepoSQL{
		readDB, writeDB,
	}
}

func (r *salesorderRepoSQL) FetchAll(ctx context.Context, filter *domain.FilterSalesorder) (data []shareddomain.Salesorder, err error) {
	trace, ctx := tracer.StartTraceWithContext(ctx, "SalesorderRepoSQL:FetchAll")
	defer func() { trace.SetError(err); trace.Finish() }()

	if filter.OrderBy == "" {
		filter.OrderBy = "modified_at"
	}

	db := globalshared.SetSpanToGorm(ctx, r.readDB)

	err = db.Order(filter.OrderBy + " " + filter.Sort).
		Limit(filter.Limit).Offset(filter.Offset).
		Find(&data).Error
	return
}

func (r *salesorderRepoSQL) Count(ctx context.Context, filter *domain.FilterSalesorder) (count int) {
	trace, ctx := tracer.StartTraceWithContext(ctx, "SalesorderRepoSQL:Count")
	defer trace.Finish()

	db := globalshared.SetSpanToGorm(ctx, r.readDB)

	var total int64
	db.Model(&shareddomain.Salesorder{}).Count(&total)
	count = int(total)

	return
}

func (r *salesorderRepoSQL) Find(ctx context.Context, filter *domain.FilterSalesorder) (result shareddomain.Salesorder, err error) {
	trace, ctx := tracer.StartTraceWithContext(ctx, "SalesorderRepoSQL:Find")
	defer func() { trace.SetError(err); trace.Finish() }()

	db := globalshared.SetSpanToGorm(ctx, r.readDB)
	if filter.ID != "" {
		db = db.Where("id = ?", filter.ID)
	}

	err = db.First(&result).Error
	return
}

func (r *salesorderRepoSQL) Save(ctx context.Context, data *shareddomain.Salesorder) (err error) {
	trace, ctx := tracer.StartTraceWithContext(ctx, "SalesorderRepoSQL:Save")
	defer func() { trace.SetError(err); trace.Finish() }()
	tracer.Log(ctx, "data", data)

	db := r.writeDB
	if tx, ok := candishared.GetValueFromContext(ctx, candishared.ContextKeySQLTransaction).(*gorm.DB); ok {
		db = tx
	}
	data.ModifiedAt = time.Now()
	if data.CreatedAt.IsZero() {
		data.CreatedAt = time.Now()
	}
	if data.ID == "" {
		data.ID = uuid.NewString()
		err = globalshared.SetSpanToGorm(ctx, db).Create(data).Error
	} else {
		err = globalshared.SetSpanToGorm(ctx, db).Save(data).Error
	}
	return
}

func (r *salesorderRepoSQL) Delete(ctx context.Context, id string) (err error) {
	trace, ctx := tracer.StartTraceWithContext(ctx, "SalesorderRepoSQL:Delete")
	defer func() { trace.SetError(err); trace.Finish() }()

	db := r.writeDB
	if tx, ok := candishared.GetValueFromContext(ctx, candishared.ContextKeySQLTransaction).(*gorm.DB); ok {
		db = tx
	}
	err = globalshared.SetSpanToGorm(ctx, db).Delete(&shareddomain.Salesorder{ID: id}).Error
	return
}
