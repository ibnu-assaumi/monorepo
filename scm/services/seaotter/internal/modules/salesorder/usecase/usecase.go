// Code generated by candi v1.8.8.

package usecase

import (
	"monorepo/services/seaotter/pkg/shared/repository"
	"monorepo/services/seaotter/pkg/shared/usecase/common"

	"github.com/Bhinneka/candi/codebase/factory/dependency"
	"github.com/Bhinneka/candi/codebase/factory/types"
	"github.com/Bhinneka/candi/codebase/interfaces"
)

// SalesorderUsecase abstraction
type SalesorderUsecase interface {
}

type salesorderUsecase struct {
	sharedUsecase common.Usecase
	cache         interfaces.Cache
	repoSQL       repository.RepoSQL
	// repoMongo     repository.RepoMongo
	kafkaPub interfaces.Publisher
	// rabbitmqPub   interfaces.Publisher
}

// NewSalesorderUsecase usecase impl constructor
func NewSalesorderUsecase(deps dependency.Dependency) (SalesorderUsecase, func(sharedUsecase common.Usecase)) {
	uc := &salesorderUsecase{
		cache:   deps.GetRedisPool().Cache(),
		repoSQL: repository.GetSharedRepoSQL(),
		// repoMongo: repository.GetSharedRepoMongo(),
		kafkaPub: deps.GetBroker(types.Kafka).GetPublisher(),
		// rabbitmqPub: deps.GetBroker(types.RabbitMQ).GetPublisher(),
	}
	return uc, func(sharedUsecase common.Usecase) {
		uc.sharedUsecase = sharedUsecase
	}
}
