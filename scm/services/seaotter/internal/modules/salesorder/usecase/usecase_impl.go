// Code generated by candi v1.8.8.

package usecase

import (
	"context"

	"monorepo/services/seaotter/internal/modules/salesorder/domain"
	shareddomain "monorepo/services/seaotter/pkg/shared/domain"
	"monorepo/services/seaotter/pkg/shared/repository"
	"monorepo/services/seaotter/pkg/shared/usecase/common"

	"github.com/Bhinneka/candi/codebase/factory/dependency"
	"github.com/Bhinneka/candi/codebase/factory/types"
	"github.com/Bhinneka/candi/codebase/interfaces"
	"github.com/Bhinneka/candi/tracer"

	"github.com/Bhinneka/candi/candishared"
)

type salesorderUsecaseImpl struct {
	sharedUsecase common.Usecase
	cache         interfaces.Cache
	repoSQL       repository.RepoSQL
	repoMongo     repository.RepoMongo
	kafkaPub      interfaces.Publisher
	// rabbitmqPub   interfaces.Publisher
}

// NewSalesorderUsecase usecase impl constructor
func NewSalesorderUsecase(deps dependency.Dependency) (SalesorderUsecase, func(sharedUsecase common.Usecase)) {
	uc := &salesorderUsecaseImpl{
		cache:     deps.GetRedisPool().Cache(),
		repoSQL:   repository.GetSharedRepoSQL(),
		repoMongo: repository.GetSharedRepoMongo(),
		kafkaPub:  deps.GetBroker(types.Kafka).GetPublisher(),
		// rabbitmqPub: deps.GetBroker(types.RabbitMQ).GetPublisher(),
	}
	return uc, func(sharedUsecase common.Usecase) {
		uc.sharedUsecase = sharedUsecase
	}
}

func (uc *salesorderUsecaseImpl) GetAllSalesorder(ctx context.Context, filter *domain.FilterSalesorder) (data []shareddomain.Salesorder, meta candishared.Meta, err error) {
	trace, ctx := tracer.StartTraceWithContext(ctx, "SalesorderUsecase:GetAllSalesorder")
	defer trace.Finish()

	filter.CalculateOffset()
	data, err = uc.repoSQL.SalesorderRepo().FetchAll(ctx, filter)
	if err != nil {
		return data, meta, err
	}
	count := uc.repoSQL.SalesorderRepo().Count(ctx, filter)
	meta = candishared.NewMeta(filter.Page, filter.Limit, count)

	return
}

func (uc *salesorderUsecaseImpl) GetDetailSalesorder(ctx context.Context, id string) (data shareddomain.Salesorder, err error) {
	trace, ctx := tracer.StartTraceWithContext(ctx, "SalesorderUsecase:GetDetailSalesorder")
	defer trace.Finish()

	repoFilter := domain.FilterSalesorder{ID: id}
	data, err = uc.repoSQL.SalesorderRepo().Find(ctx, &repoFilter)
	return
}

func (uc *salesorderUsecaseImpl) CreateSalesorder(ctx context.Context, data *shareddomain.Salesorder) (err error) {
	trace, ctx := tracer.StartTraceWithContext(ctx, "SalesorderUsecase:CreateSalesorder")
	defer trace.Finish()

	return uc.repoSQL.SalesorderRepo().Save(ctx, data)
}

func (uc *salesorderUsecaseImpl) UpdateSalesorder(ctx context.Context, id string, data *shareddomain.Salesorder) (err error) {
	trace, ctx := tracer.StartTraceWithContext(ctx, "SalesorderUsecase:UpdateSalesorder")
	defer trace.Finish()

	repoFilter := domain.FilterSalesorder{ID: id}
	existing, err := uc.repoSQL.SalesorderRepo().Find(ctx, &repoFilter)
	if err != nil {
		return err
	}
	data.ID = existing.ID
	data.CreatedAt = existing.CreatedAt
	err = uc.repoSQL.SalesorderRepo().Save(ctx, data)
	return
}

func (uc *salesorderUsecaseImpl) DeleteSalesorder(ctx context.Context, id string) (err error) {
	trace, ctx := tracer.StartTraceWithContext(ctx, "SalesorderUsecase:DeleteSalesorder")
	defer trace.Finish()

	return uc.repoSQL.SalesorderRepo().Delete(ctx, id)
}
