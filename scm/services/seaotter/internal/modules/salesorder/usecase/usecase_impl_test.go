// Code generated by candi v1.8.8.

package usecase

import (
	"context"
	"errors"

	"monorepo/services/seaotter/internal/modules/salesorder/domain"
	mockrepo "monorepo/services/seaotter/pkg/mocks/modules/salesorder/repository"
	mocksharedrepo "monorepo/services/seaotter/pkg/mocks/shared/repository"
	shareddomain "monorepo/services/seaotter/pkg/shared/domain"
	"testing"

	mockdeps "/mocks/codebase/factory/dependency"
	mockinterfaces "/mocks/codebase/interfaces"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
)

func TestNewSalesorderUsecase(t *testing.T) {

	mockPublisher := &mockinterfaces.Publisher{}
	mockBroker := &mockinterfaces.Broker{}
	mockBroker.On("GetPublisher").Return(mockPublisher)

	mockCache := &mockinterfaces.Cache{}
	mockRedisPool := &mockinterfaces.RedisPool{}
	mockRedisPool.On("Cache").Return(mockCache)

	mockDeps := &mockdeps.Dependency{}
	mockDeps.On("GetRedisPool").Return(mockRedisPool)
	mockDeps.On("GetBroker", mock.Anything).Return(mockBroker)

	uc, setFunc := NewSalesorderUsecase(mockDeps)
	setFunc(nil)
	assert.NotNil(t, uc)
}

func Test_salesorderUsecaseImpl_GetAllSalesorder(t *testing.T) {
	t.Run("Testcase #1: Positive", func(t *testing.T) {

		salesorderRepo := &mockrepo.SalesorderRepository{}
		salesorderRepo.On("FetchAll", mock.Anything, mock.Anything, mock.Anything).Return([]shareddomain.Salesorder{}, nil)
		salesorderRepo.On("Count", mock.Anything, mock.Anything).Return(10)

		repoSQL := &mocksharedrepo.RepoSQL{}
		repoSQL.On("SalesorderRepo").Return(salesorderRepo)

		uc := salesorderUsecaseImpl{
			repoSQL: repoSQL,
		}

		_, _, err := uc.GetAllSalesorder(context.Background(), &domain.FilterSalesorder{})
		assert.NoError(t, err)
	})

	t.Run("Testcase #2: Negative", func(t *testing.T) {

		salesorderRepo := &mockrepo.SalesorderRepository{}
		salesorderRepo.On("FetchAll", mock.Anything, mock.Anything, mock.Anything).Return([]shareddomain.Salesorder{}, errors.New("Error"))
		salesorderRepo.On("Count", mock.Anything, mock.Anything).Return(10)

		repoSQL := &mocksharedrepo.RepoSQL{}
		repoSQL.On("SalesorderRepo").Return(salesorderRepo)

		uc := salesorderUsecaseImpl{
			repoSQL: repoSQL,
		}

		_, _, err := uc.GetAllSalesorder(context.Background(), &domain.FilterSalesorder{})
		assert.Error(t, err)
	})
}

func Test_salesorderUsecaseImpl_GetDetailSalesorder(t *testing.T) {
	t.Run("Testcase #1: Positive", func(t *testing.T) {

		responseData := shareddomain.Salesorder{}

		salesorderRepo := &mockrepo.SalesorderRepository{}
		salesorderRepo.On("Find", mock.Anything, mock.Anything).Return(responseData, nil)

		repoSQL := &mocksharedrepo.RepoSQL{}
		repoSQL.On("SalesorderRepo").Return(salesorderRepo)

		uc := salesorderUsecaseImpl{
			repoSQL: repoSQL,
		}

		result, err := uc.GetDetailSalesorder(context.Background(), "id")
		assert.NoError(t, err)
		assert.Equal(t, responseData, result)
	})
}

func Test_salesorderUsecaseImpl_CreateSalesorder(t *testing.T) {
	t.Run("Testcase #1: Positive", func(t *testing.T) {

		salesorderRepo := &mockrepo.SalesorderRepository{}
		salesorderRepo.On("Save", mock.Anything, mock.Anything).Return(nil)

		repoSQL := &mocksharedrepo.RepoSQL{}
		repoSQL.On("SalesorderRepo").Return(salesorderRepo)

		uc := salesorderUsecaseImpl{
			repoSQL: repoSQL,
		}

		err := uc.CreateSalesorder(context.Background(), &shareddomain.Salesorder{})
		assert.NoError(t, err)
	})
}

func Test_salesorderUsecaseImpl_UpdateSalesorder(t *testing.T) {
	t.Run("Testcase #1: Positive", func(t *testing.T) {

		salesorderRepo := &mockrepo.SalesorderRepository{}
		salesorderRepo.On("Find", mock.Anything, mock.Anything).Return(shareddomain.Salesorder{}, nil)
		salesorderRepo.On("Save", mock.Anything, mock.Anything).Return(nil)

		repoSQL := &mocksharedrepo.RepoSQL{}
		repoSQL.On("SalesorderRepo").Return(salesorderRepo)

		uc := salesorderUsecaseImpl{
			repoSQL: repoSQL,
		}

		err := uc.UpdateSalesorder(context.Background(), "id", &shareddomain.Salesorder{})
		assert.NoError(t, err)
	})

	t.Run("Testcase #2: Negative", func(t *testing.T) {

		salesorderRepo := &mockrepo.SalesorderRepository{}
		salesorderRepo.On("Find", mock.Anything, mock.Anything).Return(shareddomain.Salesorder{}, errors.New("Error"))
		salesorderRepo.On("Save", mock.Anything, mock.Anything).Return(nil)

		repoSQL := &mocksharedrepo.RepoSQL{}
		repoSQL.On("SalesorderRepo").Return(salesorderRepo)

		uc := salesorderUsecaseImpl{
			repoSQL: repoSQL,
		}

		err := uc.UpdateSalesorder(context.Background(), "id", &shareddomain.Salesorder{})
		assert.Error(t, err)
	})
}

func Test_salesorderUsecaseImpl_DeleteSalesorder(t *testing.T) {
	t.Run("Testcase #1: Positive", func(t *testing.T) {

		salesorderRepo := &mockrepo.SalesorderRepository{}
		salesorderRepo.On("Delete", mock.Anything, mock.Anything).Return(nil)

		repoSQL := &mocksharedrepo.RepoSQL{}
		repoSQL.On("SalesorderRepo").Return(salesorderRepo)

		uc := salesorderUsecaseImpl{
			repoSQL: repoSQL,
		}

		err := uc.DeleteSalesorder(context.Background(), "id")
		assert.NoError(t, err)
	})
}
